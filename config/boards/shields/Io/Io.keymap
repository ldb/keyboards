#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include "48keys.h"

&sk {
  release-after-ms = <STICKY_KEY_TIMEOUT>;
};

&caps_word {
  continue-list = <UNDERSCORE MINUS BACKSPACE>;
};

&kscan0 {
  debounce-period = <14>;
};

/ {
  behaviors {

    skq: sticky_key_quick_release {
      compatible = "zmk,behavior-sticky-key";
      label = "STICKY_KEY_QUICK_RELEASE";
      #binding-cells = <1>;
      bindings = <&kp>;
      quick-release;
      release-after-ms = <STICKY_KEY_TIMEOUT>;
    };

    // Sticky key on tap, normal key on hold
    // Useful for modifier-clicking without the modifier remaining active
    nk: not_so_sticky_key {
      compatible = "zmk,behavior-hold-tap";
      label = "NOT_SO_STICKY_KEY";
      #binding-cells = <2>;
      tapping_term_ms = <200>;
      flavor = "tap-preferred";
      bindings = <&kp>, <&sk>;
    };

    // A hold-tap that activates without delay (like `&mo`)
    mo_tap: mo_with_tap {
      compatible = "zmk,behavior-hold-tap";
      label = "MO_WITH_TAP";
      #binding-cells = <2>;
      tapping_term_ms = <0>;
      retro-tap;
      flavor = "hold-preferred";
      bindings = <&mo>, <&kp>;
    };
  };

  /*
    LAYERS
      &mo - Momentary Layer switch
      &lt - Layer Tap - Enable layer when held, key when tapped
      &to - Enable layer permanently, disables all others but base
      &tog - Toggle layer until manually disabled
    
    OTHERS
      &kp - Key press, nothing more
      &mt - Mod-Tap - Key if held, different key if tapped
      &sk - Sticky Key - Key is pressed until another key is pressed (e.g sticky shift)
      &sl - Sticky layer - Same as &sk but with layers

  */
                                                     
  keymap {
    compatible = "zmk,keymap";

    base_layer {
      label = "HXY";
      bindings = <
          &kp TAB   &kp Q    &kp W    &kp E    &kp R   &kp T  &kp Y  &kp U   &kp I     &kp O    &kp P     &kp BSPC
          &kp ESC   &kp A    &kp S    &kp D    &kp F   &kp G  &kp H  &kp J   &kp K     &kp L    &kp SEMI  &kp SQT
          &kp LSHFT &kp Z    &kp X    &kp C    &kp V   &kp B  &kp N  &kp M   &kp COMMA &kp DOT  &kp SLASH &kp RET
          &trans    &kp LCTL &kp LALT &kp LGUI &mo LOW   &kp SPACE   &mo RSE &kp LEFT  &kp DOWN &kp UP    &kp RIGHT
      >;
    };

    low_layer {
      label = "LOW";
      bindings = <
        &kp LS(GRAVE) &kp LS(N1) &kp LS(N2) &kp LS(N3) &kp LS(N4) &kp LS(N5) &kp LS(N6) &kp LS(N7)   &kp LS(N8)   &kp LS(N9)   &kp LS(N0)   &kp DEL
        &kp DEL       &kp F1     &kp F2     &kp F3     &kp F4     &kp F5     &kp F6     &kp UNDER    &kp PLUS     &kp LBRC     &kp RBRC     &kp PIPE
        &trans        &kp F7     &kp F8     &kp F9     &kp F10    &kp F11    &kp F12    &kp LS(HASH) &kp LS(BSLH) &kp HOME     &kp END      &trans
        &trans        &trans     &trans     &trans     &trans           &trans          &trans       &kp C_NEXT   &kp C_VOL_DN &kp C_VOL_UP &kp C_PP
      >;
    };

    rse_layer {
      label = "RSE";
      bindings = <
        &kp GRAVE  &kp N1      &kp N2 &kp N3 &kp N4  &kp N5  &kp N6  &kp N7    &kp N8     &kp N9       &kp N0       &kp BSPC
        &kp DEL    &kp F1      &kp F2 &kp F3 &kp F4  &kp F5  &kp F6  &kp MINUS &kp EQUAL  &kp LBKT     &kp RBKT     &kp BSLH
        &trans     &kp F7      &kp F8 &kp F9 &kp F10 &kp F11 &kp F12 &kp HASH  &kp BSLH   &kp PG_UP    &kp PG_DN    &trans
        &sys_reset &bootloader &trans &trans &trans        &trans    &trans    &kp C_NEXT &kp C_VOL_DN &kp C_VOL_UP &kp C_PP
      >;
    };
  };
};
